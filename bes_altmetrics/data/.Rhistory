#' Get Total Impact (http://totalimpact.org/) metrics or bibliography on a paper.
#'
#' @import stringr RJSONIO plyr
#' @param id The DOI, URL, or PubMed ID - see examples.
#' @param fields One of 'metrics' or 'biblio'.
#' @param url The base URL (do not change from default).
#' @return A list.
#' @export
#' @examples \dontrun{
#' totimp(id = '10.5061/dryad.8671')
#' totimp(id = '10.5061/dryad.8654', 'biblio')
#' totimp(id = list('10.5061/dryad.8671','18428094','http://opensciencesummit.com/program/'), 'metrics')
#' totimp(id = '18428094', 'biblio')
#' }
totimp <- function(id = NA, fields = 'metrics', sleep = 0,
url = "http://total-impact.org/api/v1/items/")
{
#   getURL("http://total-impact-core.herokuapp.com/tiid/doi/10.1371/journal.pcbi.1000361")
#   fromJSON(getURL("http://total-impact-core.herokuapp.com/item/1b2f4fc2bea711e1bdf912313d1a5e63"))
Sys.sleep(sleep)
id_ <- paste(
laply(id, str_replace_all, pattern='/', replacement='%252F'),
collapse=','
)
url2 <- paste(url, id_, '.json', '?fields=', fields, sep='')
fromJSON(url2)
}
# URL
# http://total-impact.org/api/v1/items/18428094,10.1371%252Fjournal.pmed.0020124,http:%252F%252Fopensciencesummit.com%252Fprogram%252F,10.5061%252Fdryad.8048.json?fields=metrics
# Multiple
# fromJSON("http://total-impact.org/api/v1/items/18428094,10.1371%252Fjournal.pmed.0020124,http:%252F%252Fopensciencesummit.com%252Fprogram%252F,10.5061%252Fdryad.8048.json?fields=metrics")
# Dryad
# fromJSON("http://total-impact.org/api/v1/items/10.5061%252Fdryad.8671.json?fields=biblio")
# PubMed
# fromJSON("http://total-impact.org/api/v1/items/10.1371%252Fjournal.pmed.0020124.json?fields=metrics")
# Other
# fromJSON("http://total-impact.org/api/v1/items/18428094.json?fields=biblio")
totimp(id = '10.5061/dryad.8671')
detach("package:rjson")
totimp(id = '10.5061/dryad.8671')
totimp_hello()
totimp_getitem(tiid = "0df8aa0eb2c911e19e181231381b0f5a")
#' Plot altmetrics
#'
#' This function plots metrics on persons or articles from many sources.
#'
#' @param diggname Digg username
#' @param gitid GitHub username
#' @param gittype GitHub type, 'user' or 'org'
#' @author Scott Chamberlain
#' @export
altmetrics <- function(diggname = list("cboettig","lo0ol"),
gitid = list("cboettig", "holman"), gittype = "user")
{
#ggplot is easier to load.
require(ggplot2); require(RCurl); require(RJSONIO); require(plyr)
digout <- laply(diggname, digg_user)
diggs_ <- data.frame(ldply(gitid), digout, rep("diggs", length(gitid)))
gitout <- laply(gitid, git_wf)
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))
names(diggs_) <- c("user","value","metric")
names(gits_) <- c("user","value","metric")
df <- rbind(diggs_, gits_)
myplot <- ggplot(df, aes(metric, value, fill=user)) +
geom_bar(position="dodge") +
theme_bw(base_size = 18)
message("names default to Github user names")
print(myplot)
invisible();
}
#' Get Digg metrics on a user.
#'
#' Given a single or multiple Digg usernames or user ID's, returns for each
#'  number of diggs, comments, followers, following, and submissions.
#' @param usernames Comma separated list of usernames (e.g., 'kevinrose,leolaporte').
#' @param userids Comma separated list of user IDs (e.g., '59,60').
#' @param url The base Digg url (leave to default).
#' @param ... optional additional curl options (debugging tools mostly)
#' @param curl If using in a loop, call getCurlHandle() first and pass
#'  the returned value in here (avoids unnecessary footprint)
#' @author Scott Chamberlain
#' @export
digg_user <- function(usernames = NA, userids = NA,
url = "http://services.digg.com/2.0/user.getInfo",
..., curl = getCurlHandle())
{
args <- list()
if(!is.na(usernames))
args$usernames <- usernames
if(!is.na(userids))
args$user_ids <- userids
#   message(paste(url,"?",names(args[1]),"=",args[1],sep=''))
xx <- getForm(url,
.params = args,
...,
curl = curl)
tt <- fromJSON(xx)
out <- laply(tt$users, function(x) x$diggs)[[1]]
names(out) <- 'diggs'
out
}
#' Get github stats (watchers and forks).
#'
#' This function gets watchers and forks of github repos for a user or organization.
#'
#' @param id name of the github user or organization
#' @param type either "user" or "org"
#' @author Scott Chamberlain
#' @export
git_wf <- function (id = "hadley", type = "user")
{
if (type == "user") {
url = "https://api.github.com/users/"
}
else if (type == "org") {
url = "https://api.github.com/orgs/"
}
else stop("parameter 'type' has to be either 'user' or 'org' ")
url2 <- paste(url, id, "/repos?per_page=100", sep = "")
xx <- RCurl::getURL(url2)
tt <- RJSONIO::fromJSON(xx)
if (!length(tt) == 1) {
tt <- tt
}
else {
stop("user or organization not found - search GitHub? - https://github.com/")
}
out <- plyr::ldply(tt, function(x) t(c(x$forks, x$watchers)))
names(out) <- c("Forks", "Watchers")
out$Forks <- as.integer(out$Forks)
out$Watchers <- as.integer(out$Watchers)
c(gitforks=sum(out$Forks), gitwatchers=sum(out$Watchers))
}
altmetrics()
git_wf()
digg_user()
digg_user(usernames="cboettig")
#' Get Altmetric.com data for a given article.
#' @import RCurl RJSONIO plyr
#' @param service Service of the article ID you are searchin for: one of
#'    'id' (Altmetric.com article ID), 'doi' (article DOI),
#'    'pmid' (PubMed ID), or 'arxiv' (arXiv ID).
#' @param id ID of the article.
#' @param all print all results (TRUE - default), or not (FALSE).
#' @param url The base CitedIn url (should be left to default)
#' @param key Your Altmetric.com API key.
#' @return Altmetric.com data on the given article in a list.
#' @export
#' @examples \dontrun{
#' altmetcom('id', '241939') # using altmetric.com article id
#' altmetcom('doi', '10.1038/480426a') # using doi
#' altmetcom('pmid', '21148220') # using pubmed id
#' altmetcom('arxiv', '1108.2455') # using arxiv id
#' }
altmetcom <- function(service, articleid = NA, all = TRUE,
url = "http://api.altmetric.com/v1/", key = getOption("altmetriccom"))
{
if(is.null(key))
{ url2 <- paste(url, service, '/', articleid, sep='') } else
{ url2 <- paste(url, service, '/', articleid, '?key=', key, sep='') }
message(url2)
tt <- fromJSON(getURL(url2))
if(all == TRUE){ tt } else
{ stop("working on more options for this fxn...") }
}
altmetcom('id', '241939') # using altmetric.com article id
altmetcom('doi', '10.1038/480426a') # using doi
altmetcom <- function(service, id = NA,
url = "http://api.altmetric.com/v1/", key = getOption("altmetriccom"))
{
if(is.null(key))
{ url2 <- paste(url, 'doi', '/', id, sep='') } else
{ url2 <- paste(url, 'doi', '/', id, '?key=', key, sep='') }
message(url2)
fromJSON(getURL(url2))
}
altmetcom('10.1038/480426a') # using doi
altmetcom <- function(id = NA,
url = "http://api.altmetric.com/v1/", key = getOption("altmetriccom"))
{
if(is.null(key))
{ url2 <- paste(url, 'doi', '/', id, sep='') } else
{ url2 <- paste(url, 'doi', '/', id, '?key=', key, sep='') }
message(url2)
fromJSON(getURL(url2))
}
altmetcom('10.1038/480426a') # using doi
mm<-altmetcom('10.1038/480426a') # using doi
mm
lapply(mm, "[")
lapply(mm, "[{")
lapply(mm, "[[")
lapply(mm, "[", "cited_by_gplus_count")
mm[mm %in% c("cited_by_gplus_count")]
mm[mm %in% "cited_by_gplus_count"]
mm[names(mm) %in% "cited_by_gplus_count"]
mm[names(mm) %in% c("cited_by_gplus_count","cited_by_tweeters_count","cited_by_fbwalls_count")]
mm[[names(mm) %in% c("cited_by_gplus_count","cited_by_tweeters_count","cited_by_fbwalls_count")]]
altmetcom <- function(id = NA,
url = "http://api.altmetric.com/v1/", key = getOption("altmetriccom"))
{
if(is.null(key))
{ url2 <- paste(url, 'doi', '/', id, sep='') } else
{ url2 <- paste(url, 'doi', '/', id, '?key=', key, sep='') }
message(url2)
tt <- fromJSON(getURL(url2))
tt[names(tt) %in% c("cited_by_gplus_count","cited_by_tweeters_count","cited_by_fbwalls_count")]
}
altmetcom('10.1038/480426a') # using doi
altmetcom <- function(id = NA,
url = "http://api.altmetric.com/v1/", key = getOption("altmetriccom"))
{
if(is.null(key))
{ url2 <- paste(url, 'doi', '/', id, sep='') } else
{ url2 <- paste(url, 'doi', '/', id, '?key=', key, sep='') }
tt <- fromJSON(getURL(url2))
tt[names(tt) %in% c("cited_by_gplus_count","cited_by_tweeters_count","cited_by_fbwalls_count")]
}
altmet = "10.1038/480426a"
altmet
altmetout <- altmetcom(altmet)
altmetout
data.frame(altmetout)
gitout <- laply(gitid, git_wf)
gitid = "cboettig"
gitout <- laply(gitid, git_wf)
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))
gits_
alts <- data.frame("cboettig", altmetout)
alts
gits_
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))[,-2]
gits_
alts
t(altmetout)
data.frame(altmetout)
data.frame(t(altmetout))
altmetout
library(reshape2)
alts
melt(alts)
altmetout <- altmetcom(altmet)
alts <- melt(data.frame("cboettig", altmetout))
alts
names(alts) <- c("user","value","metric")
names(gits_) <- c("user","value","metric")
df <- rbind(diggs_, gits_)
df <- rbind(alts, gits_)
gits_
alts
alts <- data.frame("cboettig", altmetout)
alts
alts <- melt(data.frame("cboettig", altmetout))
alts
names(alts) <- c("user","value","metric")
alts
alts <- data.frame(alts[,1],alts[,3],alts[,2])
alts
gits_
df <- rbind(alts, gits_)
alts
altmetout <- altmetcom(altmet)
alts <- melt(data.frame("cboettig", altmetout))
names(alts) <- c("user","value","metric")
alts
alts <- data.frame(alts[,1],alts[,3],alts[,2])
alts
alts <- data.frame(alts$user,alts$metric,alts$value)
names(alts) <- c("user","value","metric")
altmetout <- altmetcom(altmet)
alts <- melt(data.frame("cboettig", altmetout))
names(alts) <- c("user","value","metric")
alts <- data.frame(alts$user,alts$metric,alts$value)
alts
altmetout <- altmetcom(altmet)
alts <- melt(data.frame("cboettig", altmetout))
alts <- data.frame(user=alts$user,metric=alts$metric,value=alts$value)
names(gits_) <- c("user","value","metric")
names(alts) <- c("user","value","metric")
alts <- data.frame(user=alts$user,metric=alts$metric,value=alts$value)
altmetout <- altmetcom(altmet)
alts <- melt(data.frame("cboettig", altmetout))
names(alts) <- c("user","value","metric")
alts <- data.frame(user=alts$user,metric=alts$metric,value=alts$value)
alts
gitout <- laply(gitid, git_wf)
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))[,-2]
names(gits_) <- c("user","value","metric")
df <- rbind(alts, gits_)
df
gits_
alts
altmetout <- altmetcom(altmet)
alts <- melt(data.frame("cboettig", altmetout))
names(alts) <- c("user","value","metric")
alts <- data.frame(user=alts$user,value=alts$metric,metric=alts$value)
gitout <- laply(gitid, git_wf)
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))[,-2]
names(gits_) <- c("user","value","metric")
df <- rbind(alts, gits_)
df
myplot <- ggplot(df, aes(metric, value, fill=user)) +
geom_bar(position="dodge") +
theme_bw(base_size = 18)
message("names default to Github user names")
print(myplot)
altmetout <- altmetcom(altmet)
altmetout
names(altmetout)
names(altmetout) <- c("fbook","gplus","twitter")
altmetout
alts <- melt(data.frame("cboettig", altmetout))
names(alts) <- c("user","value","metric")
alts <- data.frame(user=alts$user,value=alts$metric,metric=alts$value)
gitout <- laply(gitid, git_wf)
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))[,-2]
names(gits_) <- c("user","value","metric")
df <- rbind(alts, gits_)
myplot <- ggplot(df, aes(metric, value, fill=user)) +
geom_bar(position="dodge") +
theme_bw(base_size = 18)
message("names default to Github user names")
print(myplot)
#' Get Bit.ly clicks for a given URL.
#'
#' @import RCurl RJSONIO
#' @param bitlyurl The bit.ly short URL.
#' @param bitlyusername Your bit.ly username.
#' @param bitlykey Your bit.ly API key.
#' @return Vector of length 2, with user clicks and global clicks.
#' @export
#' @examples \dontrun{
#' bitly_clicks(bitlyurl = 'http://bit.ly/xaTrO7')
#' }
bitly_clicks <- function(bitlyurl,
bitlyusername = getOption("bitlyusername", stop("need a username for Bit.ly")),
bitlykey = getOption("bitlykey", stop("need an API key for Bit.ly")) )
{
out <- fromJSON(getURL(paste(
"https://api-ssl.bitly.com/v3/clicks?login=", bitlyusername, "&apiKey=",
bitlykey, "&shortUrl=", bitlyurl, "&format=json", sep='')))
c(out$data$clicks[[1]][3], out$data$clicks[[1]][5])
}
bitly_clicks(bitlyurl = 'http://bit.ly/xaTrO7')
bitlyurl = 'http://bit.ly/xaTrO7'
bitout <- bitly_clicks(bitlyurl)[[1]]
bitout
bitout <- bitly_clicks(bitlyurl)[1]
bitout
names(bitout) <- c("bitly_clicks")
bitout
alts <- melt(data.frame("cboettig", bitout))
alts
names(alts) <- c("user","value","metric")
bitout <- bitly_clicks(bitlyurl)[1]
names(bitout) <- c("bitly_clicks")
bit <- melt(data.frame("cboettig", bitout))
names(bit) <- c("user","value","metric")
bit <- data.frame(user=bit$user,value=bit$metric,metric=bit$value)
df <- rbind(alts, gits_, bit)
altmetout <- altmetcom(altmet)
names(altmetout) <- c("fbook","gplus","twitter")
alts <- melt(data.frame("cboettig", altmetout))
names(alts) <- c("user","value","metric")
alts <- data.frame(user=alts$user,value=alts$metric,metric=alts$value)
gitout <- laply(gitid, git_wf)
gits_ <- data.frame(ldply(gitid), ldply(gitout),
rep(c("gitforks","gitwatchers"), each=length(gitid)))[,-2]
names(gits_) <- c("user","value","metric")
bitout <- bitly_clicks(bitlyurl)[1]
names(bitout) <- c("bitly_clicks")
bit <- melt(data.frame("cboettig", bitout))
names(bit) <- c("user","value","metric")
bit <- data.frame(user=bit$user,value=bit$metric,metric=bit$value)
df <- rbind(alts, gits_, bit)
df
myplot <- ggplot(df, aes(metric, value, fill=user)) +
geom_bar(position="dodge") +
theme_bw(base_size = 18)
message("names default to Github user names")
print(myplot)
roxygenize("/Users/ScottMac/github/ropensci/raltmet")
require(roxygen2)
roxygenize("/Users/ScottMac/github/ropensci/raltmet")
library(raltmet)
detach("package:raltmet")
install_github('raltmet', 'ropensci')
library(raltmet)
help(package="raltmet")
altmetmaster()
altmetmaster()
setwd("/Users/ScottMac/github/SChamberlain/bes_altmetrics/R") # set to path to directory with csv file
setwd("/Users/ScottMac/github/SChamberlain/bes_altmetrics/data") # set to path to directory with csv file
out <- read.csv("finaldata.csv")[,-1]
require(ggplot2)
library(plyr)
out <- ddply(out, .(DOI, metric), summarise,  # remove duplicate entries
value = mean(value),
year = mean(year),
journal2 = unique(journal2)
)
# out$value <- log10(out$value) # log10 transform values
out_ <- ddply(out, .(journal2, metric), summarise, # summarise by journal and metric
avgmet = mean(value, na.rm=T),
semet = sd(value, na.rm=T)/sqrt(na.omit(length(value)))
)
# Mean value of each metric by journal, across years and papers
size <- 5
dodge <- position_dodge(width=0.3)
limits <- aes(ymax = avgmet + semet, ymin = avgmet - semet)
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=16)
ggsave("meanbyjournalmetric_all.png")
ggplot(out_[!out_$metric %in% "Mendeley_readers",], aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=16)
ggsave("meanbyjournalmetric_short.png")
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=20)
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
axis.text.x=theme_text(angle=90, hjust=1) +
theme_bw(base_size=20)
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
opts(axis.text.x=theme_text(angle=90, hjust=1)) +
theme_bw(base_size=20)
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
opts(axis.text.x=theme_text(angle=180, hjust=1)) +
theme_bw(base_size=20)
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=20) +
opts(axis.text.x=theme_text(angle=180, hjust=1))
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=20) +
opts(axis.text.x=theme_text(angle=90, hjust=1))
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=20) +
opts(axis.text.x=theme_text(angle=90, size=20))
ggplot(out_, aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=20) +
opts(axis.text.x=theme_text(angle=45, size=20))
ggsave("meanbyjournalmetric_all.png")
ggplot(out_[!out_$metric %in% "Mendeley_readers",], aes(journal2, avgmet, colour=metric)) +
geom_point(size=size, position=dodge, alpha=0.6) +
geom_errorbar(limits, width=0.05, position=dodge) +
labs(x = "", y = "Mean value of metric") +
theme_bw(base_size=20) +
opts(axis.text.x=theme_text(angle=45, size=20))
ggsave("meanbyjournalmetric_short.png")
out_2 <- ddply(out, .(journal2, year, metric), summarise, # summarise by journal, year, and metric
avgmet = mean(value, na.rm=T)
)
ggplot(out_2, aes(year, avgmet, colour=journal2)) +
geom_line() +
theme_bw(base_size=14) +
labs(y = "Mean value of metric") +
opts(panel.grid.major = theme_blank(), panel.grid.minor = theme_blank()) +
facet_wrap(~ metric, scales='free')
ggplot(out_2, aes(year, avgmet, colour=journal2)) +
geom_line() +
theme_bw(base_size=14) +
labs(y = "Mean value of metric") +
opts(panel.grid.major = theme_blank(), panel.grid.minor = theme_blank()) +
facet_wrap(~ metric, scales='free') +
theme_bw(base_size=20)
ggplot(out_2, aes(year, avgmet, colour=journal2)) +
geom_line() +
theme_bw(base_size=16) +
labs(y = "Mean value of metric") +
opts(panel.grid.major = theme_blank(), panel.grid.minor = theme_blank()) +
facet_wrap(~ metric, scales='free') +
ggplot(out_2, aes(year, avgmet, colour=journal2)) +
geom_line() +
theme_bw(base_size=16) +
labs(y = "Mean value of metric") +
opts(panel.grid.major = theme_blank(), panel.grid.minor = theme_blank()) +
facet_wrap(~ metric, scales='free')
ggsave("metricsbyyear.png")
